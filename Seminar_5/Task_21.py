# Внутри него напишите код, решающий задачу о 8 ферзях, включающий в себя
# функцию is_attacking(q1,q2), проверяющую, бьют ли ферзи друг друга и heck_queens(queens), 
# которая проверяет все возможные пары ферзей.
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били друг друга.
#  Вам дана расстановка 8 ферзей на доске, определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел, каждое число от 1 до 8 - координаты 8 ферзей. 
# Если ферзи не бьют друг друга верните истину, а если бьют - ложь. Не забудьте напечатать результат.
# Пример использования.
# На входе:
# queens = [(1, 1), (2, 3), (3, 5), (4, 7), (5, 2), (6, 4), (7, 6), (8, 8)] 
# На выходе:
# True

def is_attacking(q1, q2):
    """
    Функция проверяет, бьют ли два ферзя друг друга.
    :param q1: координаты первого ферзя (x1, y1)
    :param q2: координаты второго ферзя (x2, y2)
    :return: True, если ферзи бьют друг друга, иначе False
    """
    x1, y1 = q1
    x2, y2 = q2
    if x1 == x2 or y1 == y2:  # на одной линии по горизонтали или вертикали
        return True
    if abs(x1 - x2) == abs(y1 - y2):  # на одной диагонали
        return True
    return False

def check_queens(queens):
    """
    Функция проверяет все возможные пары ферзей.
    :param queens: список координат ферзей
    :return: True, если ферзи не бьют друг друга, иначе False
    """
    n = len(queens)
    for i in range(n):
        for j in range(i + 1, n):  # чтобы не проверять каждую пару дважды
            if is_attacking(queens[i], queens[j]):
                return False
    return True

# Пример использования
queens = [(1, 1), (2, 3), (3, 5), (4, 7), (5, 2), (6, 4), (7, 6), (8, 8)]
print(check_queens(queens))
